[gd_resource type="Shader" format=3 uid="uid://lwm0x21id4b4"]

[resource]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

uniform float fov = 70.0;

uniform sampler2D light_color;
uniform sampler2D dark_color;
uniform float toon_threshold = -0.125;
uniform float toon_threshold_offset = 0.01;

void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	
	float scale = 1.0 / tan(fov * 0.5 * PI / 180.0);
	
	PROJECTION_MATRIX[0][0] = scale / (VIEWPORT_SIZE.x / VIEWPORT_SIZE.y);
	PROJECTION_MATRIX[1][1] = -scale;
	
	POSITION = PROJECTION_MATRIX * MODELVIEW_MATRIX * vec4(VERTEX.xyz, 1.0);
	POSITION.z = mix(POSITION.z, 0, 0.99);
}

void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
}

void light() {
	
	float dot_normal_light = dot(NORMAL, LIGHT);
	
	DIFFUSE_LIGHT += clamp(dot_normal_light, 0.0, 1.0) * ATTENUATION * ALBEDO;
	
	vec3 dark = texture(dark_color, vec2(0,0)).rgb;
	vec3 light = texture(light_color, vec2(0,0)).rgb;
	
	vec3 custom = mix(
		dark, 
		light, 
		smoothstep(
			toon_threshold, 
			toon_threshold + toon_threshold_offset,
			dot_normal_light));
			
	DIFFUSE_LIGHT = (ALBEDO + clamp(ATTENUATION - 0.75, 0.0, 1.0) * custom);
}"
